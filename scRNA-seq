scRNAseq core

library(Seurat)
library(monocle)
library(SeuratWrappers)
library(Signac)
library(tibble)
library(tidyr)
library(cowplot)
library(ggplot2)
library(sctransform)
library(viridis)
library(dplyr)
library(RColorBrewer)
library(DoubletFinder)
library(GenomeInfoDb)
library(ComplexHeatmap)
library(circlize)
library(rtracklayer)
library(colorRamps)
library(ggpubr)
library(MAST)

dataDir <- "/home/cshi/AdaptImmune/data/analysis/scrna-output-cell-ranger_2022-03-09_0857"
WD <- "/home/cshi/AdaptImmune/analysis/wishlist/"

##############
## Summarizer
dirs <- list.dirs(dataDir, recursive = F)
summ.list <- list()
for (dir in dirs) {
    summ.list[[gsub(paste0(dataDir, "/"), "", dir)]] <- read.csv(paste0(dir, "/metrics_summary.csv"))
}
summaries <- do.call(rbind, summ.list)
summaries

##############
## Read in data

## Create seu
seu.list <- list()
for (dir in list.dirs(dataDir)[-1]) {
  name <- gsub(paste0(dataDir, "/"), "", dir)
  seu.list[[name]] <- Read10X_h5(paste0(dir, "/filtered_feature_bc_matrix.h5"))
  seu.list[[name]] <- CreateSeuratObject(seu.list[[name]], project = name)
  seu.list[[name]] <- RenameCells(seu.list[[name]], add.cell.id = name)
}

options(repr.plot.width=8, repr.plot.height=4)

## Mito + feature check
seu.list <- lapply(seu.list, function(x) PercentageFeatureSet(x, pattern = "^mt-", col.name = "percent.mito"))
plot_grid(plotlist = lapply(seu.list, function(x) VlnPlot(x, features = "percent.mito", y.max = 100, pt.size = 0.1) + geom_hline(yintercept = 10, colour = "red") & NoLegend()), nrow = 1, align = "h", axis = "tblr")
plot_grid(plotlist = lapply(seu.list, function(x) VlnPlot(x, features = "nFeature_RNA", pt.size = 0.1, y.max = 8000) + geom_hline(yintercept = 400, colour = "red") & NoLegend()), nrow = 1, align = "hv", axis = "tblr")

## Filters
orig.count <- lapply(seu.list, function(x) ncol(x)) ## For multiplet.rate calc in DoubletFinder step
seu.list <- lapply(seu.list, function(x) subset(x, subset = percent.mito < 10))
seu.list <- lapply(seu.list, function(x) subset(x, subset = nFeature_RNA > 400))
as.data.frame(unlist(lapply(seu.list, function(x) ncol(x))))

####################
## Create object from meta

## Create combined object
seu.rna <- merge(seu.list[[1]], y=seu.list[2:length(seu.list)])

##  removing cells not in meta, these were doublets
meta <- read.csv("/home/cshi/AdaptImmune/data/Combined_20220413/Marta_RNA_meta.csv", row.names = 1)
seu.rna <- seu.rna[, rownames(meta)]

## Add metadata
meta <- meta %>% rownames_to_column("x") %>% mutate_at(vars(matches("seurat_clusters|_snn_")), as.factor) %>% column_to_rownames("x")
seu.rna <- AddMetaData(seu.rna, metadata = meta)
seu.rna@reductions[["umap"]] <- CreateDimReducObject(embeddings = as.matrix(meta[ ,c("UMAP_1", "UMAP_2")]), key = "UMAP_")

## Normalise
DefaultAssay(seu.rna) <- "RNA"
seu.rna <- NormalizeData(seu.rna)

options(repr.plot.width=8, repr.plot.height=6)
DimPlot(seu.rna, group.by =  c("orig.ident", rev(grep("SCT_snn_", colnames(seu.rna@meta.data), value = T))), label = T)

seu.rna$seurat_clusters <- seu.rna$integrated_snn_res.0.5

#############################################
## cluster IDs
cluster.ids <- openxlsx::read.xlsx("/home/cshi/AdaptImmune/data/Combined_20220413/single_cell_RNA_Pos_Gordon.xlsx", colNames = F, startRow = 2)
Idents(seu.rna) <- "seurat_clusters"
seu.rna <- RenameIdents(seu.rna, setNames(cluster.ids$X2, cluster.ids$X1))
seu.rna$seurat_clusters <- Idents(seu.rna)
options(repr.plot.width=8, repr.plot.height=6)
DimPlot(seu.rna, label = T, repel = T)

#############################################
## DE by cluster/condition


de.clust.cond <- list()
conds <- list(`Control/Exp` = c("Control", "Exp"),
               `C21/E21` = c("C21", "E21"),
               `Control/C21` = c("Control", "C21"),
               `Exp/E21` = c("Exp", "E21"))

## DE
for (cond in names(conds)) {
   for (clust in unique(seu.rna$seurat_clusters)) {
     de.clust.cond[[cond]][[clust]] <- FindMarkers(subset(seu.rna, subset = seurat_clusters == clust), group.by = "orig.ident",
                                                   ident.1 = conds[[cond]][1], ident.2 = conds[[cond]][2], test.use = "MAST")
   }
 }

## Write out
 de.clust.cond <- lapply(de.clust.cond, function(x) lapply(x, function(y) rownames_to_column(y, "Gene")))
 for (cond in names(de.clust.cond)) {
   openxlsx::write.xlsx(de.clust.cond[[cond]], paste0("./cluster_DE_", gsub("/", "_v_", cond), "_MAST.xlsx"))
 }

#############################################
## Function to get the stratified gene expression over pseudotime
## motified based on the function plot_pseudotime_heatmap from the package Monocle.
my_plot_pseudotime_heatmap <- function(cds_subset,
                                   feature_IDs = NULL, # Added to track cluster info.

                                   cluster_rows = TRUE,
                                   hclust_method = "ward.D2",
                                   num_clusters = 6,

                                   hmcols = NULL,

                                   add_annotation_row = NULL,
                                   add_annotation_col = NULL,

                                      show_rownames = FALSE,
                                   use_gene_short_name = TRUE,

                                   norm_method = c("log", "vstExprs"),
                                   scale_max=3,
                                   scale_min=-3,

                                   trend_formula = '~sm.ns(Pseudotime, df=3)',

                                   return_heatmap=FALSE,
                                   cores=1){
  num_clusters <- min(num_clusters, nrow(cds_subset))
  pseudocount <- 1
  newdata <- data.frame(Pseudotime = seq(min(pData(cds_subset)$Pseudotime), max(pData(cds_subset)$Pseudotime),length.out = 100))

  m <- genSmoothCurves(cds_subset, cores=cores, trend_formula = trend_formula,
                      relative_expr = T, new_data = newdata)

  rownames(m) <- feature_IDs

  #remove genes with no expression in any condition
  m=m[!apply(m,1,sum)==0,]

  norm_method <- match.arg(norm_method)

  # FIXME: this needs to check that vst values can even be computed. (They can only be if we're using NB as the expressionFamily)
  if(norm_method == 'vstExprs' && is.null(cds_subset@dispFitInfo[["blind"]]$disp_func) == FALSE) {
   m = vstExprs(cds_subset, expr_matrix=m)
  }
  else if(norm_method == 'log') {
   m = log10(m+pseudocount)
  }

  # Row-center the data.
  m=m[!apply(m,1,sd)==0,]
  m=Matrix::t(scale(Matrix::t(m),center=TRUE))
  m=m[is.na(row.names(m)) == FALSE,]
  m[is.nan(m)] = 0
  m[m>scale_max] = scale_max
  m[m<scale_min] = scale_min

  heatmap_matrix <- m

  return(heatmap_matrix)
}

#############################################
## Call monocle2 for pseudotime and trajectory analysis


## compared control day 10 vs experimental day 10 and so on day 21, to call for DEGs
seu.rna.subset <- subset(x=seu.rna, idents = celltypes)
Idents(seu.rna.subset) <- "integrated_snn_res.0.5"

de.cond.clust <- list()
cond <- "10days"
de.cond.clust[[cond]] <- list()
for (clust in c(2, 4, 26)){
    de.cond.clust[[cond]][[clust]] <- FindMarkers(subset(seu.rna.subset, subset = integrated_snn_res.0.5 == clust),
                                                  group.by="orig.ident", ident.1 = "Control", ident.2 = "Exp",
                                                  test.use = "MAST", verbose=FALSE)
}
cond <- "21days"
de.cond.clust[[cond]] <- list()
for (clust in c(2, 4, 26)){
    de.cond.clust[[cond]][[clust]] <- FindMarkers(subset(seu.rna.subset, subset = integrated_snn_res.0.5 == clust),
                                                  group.by="orig.ident", ident.1 = "C21", ident.2 = "E21",
                                                  test.use = "MAST", verbose=FALSE)
}

## Select significant marker gene
de.res <- data.frame()
for (cond in c("10days", "21days")){
    for (clust in c(2, 4, 26)){
        if (nrow(de.cond.clust[[cond]][[clust]]) == 0){
            next
        }
        de.cond.clust[[cond]][[clust]] <- de.cond.clust[[cond]][[clust]][de.cond.clust[[cond]][[clust]]$p_val_adj < 0.05, ]
        if (nrow(de.cond.clust[[cond]][[clust]]) == 0){
            next
        }
        de.cond.clust[[cond]][[clust]]$cond <- cond
        de.cond.clust[[cond]][[clust]]$cluster <- clust
        de.cond.clust[[cond]][[clust]]$gene <- rownames(de.cond.clust[[cond]][[clust]])
        de.res <- rbind(de.res, de.cond.clust[[cond]][[clust]])
    }
}

de.genes <- de.res$gene
de.genes.unique <- unique(de.res$gene)
paste0(length(de.genes), " DE genes, among which ", length(de.genes.unique), " genes are unique ones.")

## convert to CellDataSet
seu.rna.subset <- subset(x=seu.rna, idents = celltypes)
seu.rna.cds <- as.CellDataSet(seu.rna.subset)
seu.rna.cds <- estimateSizeFactors(seu.rna.cds)
seu.rna.cds <- estimateDispersions(seu.rna.cds)

seu.rna.cds <- monocle::setOrderingFilter(seu.rna.cds, de.genes.unique)

## dimension reduction
seu.rna.cds <- monocle::reduceDimension(seu.rna.cds, method = 'DDRTree')#, num_paths=4)

## ordering cells
seu.rna.cds <- monocle::orderCells(seu.rna.cds)
# monocle::plot_cell_trajectory(seu.rna.cds, color_by = "seurat_clusters")

## Plot each case separately
sample = "E21"
cond <- "21days"
colorscheme <- c("2"="#F8766D", "4"="#00BA38", "26"="#619CFF")
options(repr.plot.width=8, repr.plot.height=5)

cell_traject_plt1 <- monocle::plot_cell_trajectory(seu.rna.cds, color_by = "integrated_snn_res.0.5", cell_size=0.5)
cell_traject_plt1$data = subset(cell_traject_plt1$data, orig.ident==sample)
cell_traject_plt1 <- cell_traject_plt1 + scale_colour_manual(name = "", values=colorscheme, labels=c("2", "4", "26"))

cell_traject_plt2 <- monocle::plot_cell_trajectory(seu.rna.cds, color_by = "integrated_snn_res.0.5", cell_size=0.5)
cell_traject_plt2$data = subset(cell_traject_plt2$data, orig.ident==sample)
cell_traject_plt2 <- cell_traject_plt2 +
    scale_colour_manual(name = "", values=colorscheme, labels=c("2", "4", "26")) +
    facet_wrap(~integrated_snn_res.0.5, nrow = 1) +
    theme(legend.position="none")
sample.cells <- rownames(pData(seu.rna.cds))[pData(seu.rna.cds)$orig.ident == sample]

# de.res.subset <- de.res[de.res$cond == cond, ]
de.res.subset <- de.res[de.res$sample == sample, ]
seu.rna.cds.subset <- seu.rna.cds[de.res.subset$gene, sample.cells]
mat <- my_plot_pseudotime_heatmap(seu.rna.cds.subset, feature_IDs = paste(de.res.subset$cluster, de.res.subset$gene, sep='_'), cluster_rows=FALSE, return_heatmap=TRUE)
mat.gene.clusters <- sapply(strsplit(rownames(mat), "_"),"[[",1)


heatmap_plt <- Heatmap(as.matrix(mat),
        name = " ",
        left_annotation = rowAnnotation(
            clusters = anno_block(gp = gpar(col=colorscheme,
                                            fill=colorscheme, fontsize=1),
                labels = c(2, 4, 26),
                labels_gp = gpar(col = "white", fontsize = 5, alpha=0),
                width = unit(2, 'mm')
                )
            ),
        split = data.frame(Clusters = factor(mat.gene.clusters, levels = c("2", "4", "26"))),
        row_title_gp = gpar(fontsize=10),
        show_row_names=FALSE,
        show_column_names=FALSE,
        cluster_rows=FALSE,
        cluster_columns=FALSE
       )

ggarrange(ggarrange(cell_traject_plt1,
                    cell_traject_plt2,
                    nrow = 2,
                    heights = c(3, 2)
                ),
          ggarrange(grid.grabExpr(draw(heatmap_plt)),
                    ggplot()+
                        geom_segment(aes(x=2, y=0, xend=102, yend=0),
                                          arrow = arrow(type = "open", length = unit(0.1, "inches")),
                                         ) +
                        geom_text(aes(x=50, y = -10, label="Pseudotime"), size=4) +
                        theme_void() +
                        xlim(-10, 120) + ylim(-20, 5)
                    ,
                    nrow = 2,
                    heights = c(9.2,0.8)
                ),
          labels = c("A", "B"),
          ncol = 2,
          widths = c(3,2)
         )
